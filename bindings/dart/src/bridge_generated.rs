#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.63.1.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_to_json__method__OcaBundle_impl(
    port_: MessagePort,
    that: impl Wire2Api<OcaBundle> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "to_json__method__OcaBundle",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Ok(OcaBundle::to_json(&api_that))
        },
    )
}
fn wire_capture_base__method__OcaBundle_impl(
    port_: MessagePort,
    that: impl Wire2Api<OcaBundle> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "capture_base__method__OcaBundle",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Ok(OcaBundle::capture_base(&api_that))
        },
    )
}
fn wire_overlays__method__OcaBundle_impl(
    port_: MessagePort,
    that: impl Wire2Api<OcaBundle> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "overlays__method__OcaBundle",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Ok(OcaBundle::overlays(&api_that))
        },
    )
}
fn wire_attributes__method__OcaCaptureBase_impl(
    port_: MessagePort,
    that: impl Wire2Api<OcaCaptureBase> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "attributes__method__OcaCaptureBase",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Ok(OcaCaptureBase::attributes(&api_that))
        },
    )
}
fn wire_flagged_attributes__method__OcaCaptureBase_impl(
    port_: MessagePort,
    that: impl Wire2Api<OcaCaptureBase> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "flagged_attributes__method__OcaCaptureBase",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Ok(OcaCaptureBase::flagged_attributes(&api_that))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

// Section: impl IntoDart

impl support::IntoDart for OcaCaptureBase {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for OcaCaptureBase {}

impl support::IntoDart for OcaCaptureBaseAttr {
    fn into_dart(self) -> support::DartAbi {
        vec![self.name.into_dart(), self.value.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for OcaCaptureBaseAttr {}

impl support::IntoDart for OcaOverlay {
    fn into_dart(self) -> support::DartAbi {
        vec![self.said.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for OcaOverlay {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
