// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.63.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'dart:ffi' as ffi;

abstract class OcaDart {
  Future<String> toJsonMethodOcaBundle({required OcaBundle that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kToJsonMethodOcaBundleConstMeta;

  Future<OcaCaptureBase> captureBaseMethodOcaBundle(
      {required OcaBundle that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCaptureBaseMethodOcaBundleConstMeta;

  Future<List<OcaOverlay>> overlaysMethodOcaBundle(
      {required OcaBundle that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOverlaysMethodOcaBundleConstMeta;

  Future<List<OcaCaptureBaseAttr>> attributesMethodOcaCaptureBase(
      {required OcaCaptureBase that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAttributesMethodOcaCaptureBaseConstMeta;

  Future<List<String>> flaggedAttributesMethodOcaCaptureBase(
      {required OcaCaptureBase that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kFlaggedAttributesMethodOcaCaptureBaseConstMeta;

  DropFnType get dropOpaqueArcMutexOcaBundleRaw;
  ShareFnType get shareOpaqueArcMutexOcaBundleRaw;
  OpaqueTypeFinalizer get ArcMutexOcaBundleRawFinalizer;
}

@sealed
class ArcMutexOcaBundleRaw extends FrbOpaque {
  final OcaDart bridge;
  ArcMutexOcaBundleRaw.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueArcMutexOcaBundleRaw;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueArcMutexOcaBundleRaw;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.ArcMutexOcaBundleRawFinalizer;
}

class OcaBundle {
  final OcaDart bridge;
  final ArcMutexOcaBundleRaw field0;

  OcaBundle({
    required this.bridge,
    required this.field0,
  });

  Future<String> toJson({dynamic hint}) => bridge.toJsonMethodOcaBundle(
        that: this,
      );

  Future<OcaCaptureBase> captureBase({dynamic hint}) =>
      bridge.captureBaseMethodOcaBundle(
        that: this,
      );

  Future<List<OcaOverlay>> overlays({dynamic hint}) =>
      bridge.overlaysMethodOcaBundle(
        that: this,
      );
}

class OcaCaptureBase {
  final OcaDart bridge;
  final ArcMutexOcaBundleRaw field0;

  OcaCaptureBase({
    required this.bridge,
    required this.field0,
  });

  Future<List<OcaCaptureBaseAttr>> attributes({dynamic hint}) =>
      bridge.attributesMethodOcaCaptureBase(
        that: this,
      );

  Future<List<String>> flaggedAttributes({dynamic hint}) =>
      bridge.flaggedAttributesMethodOcaCaptureBase(
        that: this,
      );
}

class OcaCaptureBaseAttr {
  final String name;
  final String value;

  OcaCaptureBaseAttr({
    required this.name,
    required this.value,
  });
}

class OcaOverlay {
  final String said;

  OcaOverlay({
    required this.said,
  });
}

class OcaDartImpl implements OcaDart {
  final OcaDartPlatform _platform;
  factory OcaDartImpl(ExternalLibrary dylib) =>
      OcaDartImpl.raw(OcaDartPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory OcaDartImpl.wasm(FutureOr<WasmModule> module) =>
      OcaDartImpl(module as ExternalLibrary);
  OcaDartImpl.raw(this._platform);
  Future<String> toJsonMethodOcaBundle(
      {required OcaBundle that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_oca_bundle(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_to_json__method__OcaBundle(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kToJsonMethodOcaBundleConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kToJsonMethodOcaBundleConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "to_json__method__OcaBundle",
        argNames: ["that"],
      );

  Future<OcaCaptureBase> captureBaseMethodOcaBundle(
      {required OcaBundle that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_oca_bundle(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_capture_base__method__OcaBundle(port_, arg0),
      parseSuccessData: (d) => _wire2api_oca_capture_base(d),
      constMeta: kCaptureBaseMethodOcaBundleConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCaptureBaseMethodOcaBundleConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "capture_base__method__OcaBundle",
        argNames: ["that"],
      );

  Future<List<OcaOverlay>> overlaysMethodOcaBundle(
      {required OcaBundle that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_oca_bundle(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_overlays__method__OcaBundle(port_, arg0),
      parseSuccessData: _wire2api_list_oca_overlay,
      constMeta: kOverlaysMethodOcaBundleConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOverlaysMethodOcaBundleConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "overlays__method__OcaBundle",
        argNames: ["that"],
      );

  Future<List<OcaCaptureBaseAttr>> attributesMethodOcaCaptureBase(
      {required OcaCaptureBase that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_oca_capture_base(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_attributes__method__OcaCaptureBase(port_, arg0),
      parseSuccessData: _wire2api_list_oca_capture_base_attr,
      constMeta: kAttributesMethodOcaCaptureBaseConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAttributesMethodOcaCaptureBaseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "attributes__method__OcaCaptureBase",
        argNames: ["that"],
      );

  Future<List<String>> flaggedAttributesMethodOcaCaptureBase(
      {required OcaCaptureBase that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_oca_capture_base(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_flagged_attributes__method__OcaCaptureBase(port_, arg0),
      parseSuccessData: _wire2api_StringList,
      constMeta: kFlaggedAttributesMethodOcaCaptureBaseConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kFlaggedAttributesMethodOcaCaptureBaseConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "flagged_attributes__method__OcaCaptureBase",
            argNames: ["that"],
          );

  DropFnType get dropOpaqueArcMutexOcaBundleRaw =>
      _platform.inner.drop_opaque_ArcMutexOcaBundleRaw;
  ShareFnType get shareOpaqueArcMutexOcaBundleRaw =>
      _platform.inner.share_opaque_ArcMutexOcaBundleRaw;
  OpaqueTypeFinalizer get ArcMutexOcaBundleRawFinalizer =>
      _platform.ArcMutexOcaBundleRawFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  ArcMutexOcaBundleRaw _wire2api_ArcMutexOcaBundleRaw(dynamic raw) {
    return ArcMutexOcaBundleRaw.fromRaw(raw[0], raw[1], this);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  List<OcaCaptureBaseAttr> _wire2api_list_oca_capture_base_attr(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_oca_capture_base_attr).toList();
  }

  List<OcaOverlay> _wire2api_list_oca_overlay(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_oca_overlay).toList();
  }

  OcaCaptureBase _wire2api_oca_capture_base(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return OcaCaptureBase(
      bridge: this,
      field0: _wire2api_ArcMutexOcaBundleRaw(arr[0]),
    );
  }

  OcaCaptureBaseAttr _wire2api_oca_capture_base_attr(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return OcaCaptureBaseAttr(
      name: _wire2api_String(arr[0]),
      value: _wire2api_String(arr[1]),
    );
  }

  OcaOverlay _wire2api_oca_overlay(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return OcaOverlay(
      said: _wire2api_String(arr[0]),
    );
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }
}

// Section: api2wire

// Section: finalizer

class OcaDartPlatform extends FlutterRustBridgeBase<OcaDartWire> {
  OcaDartPlatform(ffi.DynamicLibrary dylib) : super(OcaDartWire(dylib));

// Section: api2wire

  @protected
  wire_ArcMutexOcaBundleRaw api2wire_ArcMutexOcaBundleRaw(
      ArcMutexOcaBundleRaw raw) {
    final ptr = inner.new_ArcMutexOcaBundleRaw();
    _api_fill_to_wire_ArcMutexOcaBundleRaw(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_OcaBundle> api2wire_box_autoadd_oca_bundle(OcaBundle raw) {
    final ptr = inner.new_box_autoadd_oca_bundle_0();
    _api_fill_to_wire_oca_bundle(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_OcaCaptureBase> api2wire_box_autoadd_oca_capture_base(
      OcaCaptureBase raw) {
    final ptr = inner.new_box_autoadd_oca_capture_base_0();
    _api_fill_to_wire_oca_capture_base(raw, ptr.ref);
    return ptr;
  }

// Section: finalizer

  late final OpaqueTypeFinalizer _ArcMutexOcaBundleRawFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_ArcMutexOcaBundleRawPtr);
  OpaqueTypeFinalizer get ArcMutexOcaBundleRawFinalizer =>
      _ArcMutexOcaBundleRawFinalizer;
// Section: api_fill_to_wire

  void _api_fill_to_wire_ArcMutexOcaBundleRaw(
      ArcMutexOcaBundleRaw apiObj, wire_ArcMutexOcaBundleRaw wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_box_autoadd_oca_bundle(
      OcaBundle apiObj, ffi.Pointer<wire_OcaBundle> wireObj) {
    _api_fill_to_wire_oca_bundle(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_oca_capture_base(
      OcaCaptureBase apiObj, ffi.Pointer<wire_OcaCaptureBase> wireObj) {
    _api_fill_to_wire_oca_capture_base(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_oca_bundle(OcaBundle apiObj, wire_OcaBundle wireObj) {
    wireObj.field0 = api2wire_ArcMutexOcaBundleRaw(apiObj.field0);
  }

  void _api_fill_to_wire_oca_capture_base(
      OcaCaptureBase apiObj, wire_OcaCaptureBase wireObj) {
    wireObj.field0 = api2wire_ArcMutexOcaBundleRaw(apiObj.field0);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class OcaDartWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  OcaDartWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  OcaDartWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_to_json__method__OcaBundle(
    int port_,
    ffi.Pointer<wire_OcaBundle> that,
  ) {
    return _wire_to_json__method__OcaBundle(
      port_,
      that,
    );
  }

  late final _wire_to_json__method__OcaBundlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_OcaBundle>)>>('wire_to_json__method__OcaBundle');
  late final _wire_to_json__method__OcaBundle =
      _wire_to_json__method__OcaBundlePtr
          .asFunction<void Function(int, ffi.Pointer<wire_OcaBundle>)>();

  void wire_capture_base__method__OcaBundle(
    int port_,
    ffi.Pointer<wire_OcaBundle> that,
  ) {
    return _wire_capture_base__method__OcaBundle(
      port_,
      that,
    );
  }

  late final _wire_capture_base__method__OcaBundlePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_OcaBundle>)>>(
      'wire_capture_base__method__OcaBundle');
  late final _wire_capture_base__method__OcaBundle =
      _wire_capture_base__method__OcaBundlePtr
          .asFunction<void Function(int, ffi.Pointer<wire_OcaBundle>)>();

  void wire_overlays__method__OcaBundle(
    int port_,
    ffi.Pointer<wire_OcaBundle> that,
  ) {
    return _wire_overlays__method__OcaBundle(
      port_,
      that,
    );
  }

  late final _wire_overlays__method__OcaBundlePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_OcaBundle>)>>(
      'wire_overlays__method__OcaBundle');
  late final _wire_overlays__method__OcaBundle =
      _wire_overlays__method__OcaBundlePtr
          .asFunction<void Function(int, ffi.Pointer<wire_OcaBundle>)>();

  void wire_attributes__method__OcaCaptureBase(
    int port_,
    ffi.Pointer<wire_OcaCaptureBase> that,
  ) {
    return _wire_attributes__method__OcaCaptureBase(
      port_,
      that,
    );
  }

  late final _wire_attributes__method__OcaCaptureBasePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_OcaCaptureBase>)>>(
      'wire_attributes__method__OcaCaptureBase');
  late final _wire_attributes__method__OcaCaptureBase =
      _wire_attributes__method__OcaCaptureBasePtr
          .asFunction<void Function(int, ffi.Pointer<wire_OcaCaptureBase>)>();

  void wire_flagged_attributes__method__OcaCaptureBase(
    int port_,
    ffi.Pointer<wire_OcaCaptureBase> that,
  ) {
    return _wire_flagged_attributes__method__OcaCaptureBase(
      port_,
      that,
    );
  }

  late final _wire_flagged_attributes__method__OcaCaptureBasePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_OcaCaptureBase>)>>(
      'wire_flagged_attributes__method__OcaCaptureBase');
  late final _wire_flagged_attributes__method__OcaCaptureBase =
      _wire_flagged_attributes__method__OcaCaptureBasePtr
          .asFunction<void Function(int, ffi.Pointer<wire_OcaCaptureBase>)>();

  wire_ArcMutexOcaBundleRaw new_ArcMutexOcaBundleRaw() {
    return _new_ArcMutexOcaBundleRaw();
  }

  late final _new_ArcMutexOcaBundleRawPtr =
      _lookup<ffi.NativeFunction<wire_ArcMutexOcaBundleRaw Function()>>(
          'new_ArcMutexOcaBundleRaw');
  late final _new_ArcMutexOcaBundleRaw = _new_ArcMutexOcaBundleRawPtr
      .asFunction<wire_ArcMutexOcaBundleRaw Function()>();

  ffi.Pointer<wire_OcaBundle> new_box_autoadd_oca_bundle_0() {
    return _new_box_autoadd_oca_bundle_0();
  }

  late final _new_box_autoadd_oca_bundle_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_OcaBundle> Function()>>(
          'new_box_autoadd_oca_bundle_0');
  late final _new_box_autoadd_oca_bundle_0 = _new_box_autoadd_oca_bundle_0Ptr
      .asFunction<ffi.Pointer<wire_OcaBundle> Function()>();

  ffi.Pointer<wire_OcaCaptureBase> new_box_autoadd_oca_capture_base_0() {
    return _new_box_autoadd_oca_capture_base_0();
  }

  late final _new_box_autoadd_oca_capture_base_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_OcaCaptureBase> Function()>>(
          'new_box_autoadd_oca_capture_base_0');
  late final _new_box_autoadd_oca_capture_base_0 =
      _new_box_autoadd_oca_capture_base_0Ptr
          .asFunction<ffi.Pointer<wire_OcaCaptureBase> Function()>();

  void drop_opaque_ArcMutexOcaBundleRaw(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_ArcMutexOcaBundleRaw(
      ptr,
    );
  }

  late final _drop_opaque_ArcMutexOcaBundleRawPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_ArcMutexOcaBundleRaw');
  late final _drop_opaque_ArcMutexOcaBundleRaw =
      _drop_opaque_ArcMutexOcaBundleRawPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_ArcMutexOcaBundleRaw(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_ArcMutexOcaBundleRaw(
      ptr,
    );
  }

  late final _share_opaque_ArcMutexOcaBundleRawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_ArcMutexOcaBundleRaw');
  late final _share_opaque_ArcMutexOcaBundleRaw =
      _share_opaque_ArcMutexOcaBundleRawPtr
          .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_ArcMutexOcaBundleRaw extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_OcaBundle extends ffi.Struct {
  external wire_ArcMutexOcaBundleRaw field0;
}

class wire_OcaCaptureBase extends ffi.Struct {
  external wire_ArcMutexOcaBundleRaw field0;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
